% This code is written to generate the mesh and the boundary conditions for
% the shrink-fit-disk problem
clear
close all
clc
%
% Inputs (diffraction data centers)
inputs_KM
%
% Calculate DV stresses using the analytical solution
% [ndv,dvc_x,dvc_y,dvc_z]=findnodecoordinates(R,t,alpha);
%
% Values of R, t, and alpha at the nodes
[Rnodes,tnodes,alphanodes]  = findnodalvalues(R,t,dt,alpha,dalpha);

% Find the coordinates of the nodes
[numnp,x,y,z]   = findnodecoordinates(Rnodes,tnodes,alphanodes);

for i = 1:1:numnp
   plot3(x(i), y(i), z(i), 'r.') 
end
% Find the connectivity matrix
[np]            = findconnectivity(Rnodes,tnodes,alphanodes);

numel=size(np,1);
%
% Apply boundary conditions
% traction free : nps numels
% shear free : npsyms, numelsyms
[nps,numels,npsyms,numelsyms]=applyBCs(Rnodes,tnodes,alphanodes);
%
% Plot the mesh
plotmesh
return
%
%
% Mesh properties (8-node brick)
nnps    = 4;
meltyp  = 8;
numeq   = 3*numnp;
nnpe    = meltyp;

%%%%
% np  = [np(:,1) np(:,4) np(:,3) np(:,2) np(:,5) np(:,8) np(:,7) np(:,6)];
%
% Save the meshdata
save meshdata numnp numeq numel numels numelsyms meltyp nnpe nnps np nps npsyms x y z
for i = 1:1:numel
    np(i,:);
    plot3(x(np(i,1)), y(np(i,1)), z(np(i,1)), 'r.')
    plot3(x(np(i,2)), y(np(i,2)), z(np(i,2)), 'g.')
    plot3(x(np(i,3)), y(np(i,3)), z(np(i,3)), 'b.')
    plot3(x(np(i,4)), y(np(i,4)), z(np(i,4)), 'c.')
    plot3(x(np(i,5)), y(np(i,5)), z(np(i,5)), 'rs')
    plot3(x(np(i,6)), y(np(i,6)), z(np(i,6)), 'gs')
    plot3(x(np(i,7)), y(np(i,7)), z(np(i,7)), 'bs')
    plot3(x(np(i,8)), y(np(i,8)), z(np(i,8)), 'cs')
    pause
    plot3(mean(x(np(i,:))), mean(y(np(i,:))), mean(z(np(i,:))), 'y.')
end
% for i = 1:1:numelsyms
%     npsyms(i,:);
%     for j = 1:1:4
%         plot3(x(npsyms(i,j)), y(npsyms(i,j)), z(npsyms(i,j)), 'ro')
%     end
% end
% for i = 1:1:numels
%     nps(i,:);
%     plot3(x(nps(i,1)), y(nps(i,1)), z(nps(i,1)), 'gs')
%     plot3(x(nps(i,2)), y(nps(i,2)), z(nps(i,2)), 'gs')
%     plot3(x(nps(i,3)), y(nps(i,3)), z(nps(i,3)), 'gs')
%     plot3(x(nps(i,4)), y(nps(i,4)), z(nps(i,4)), 'gs')
% end
