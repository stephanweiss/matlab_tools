function [se qe] = elstif_residual_mls(nnpe,nqptv,ndv,wtq,sfac,dndx,dndy,dndz,detj,lambda,phi)% forms elemental stiffness matrix ndofnp = 6;numdim = 3;penalty_parm = lambda;iend1 =   nnpe*ndofnp;sfac_sig       = zeros(1,nnpe);sfac_onedof    = zeros(1,nnpe);sfac_sixdof    = zeros(ndofnp,iend1);%qe      = zeros(iend1,ndofnp);qe      = zeros(iend1,ndofnp*ndv);mdofnp      = zeros(iend1,iend1);equil_con   = zeros(iend1,iend1);bmatrix     = zeros(numdim,iend1);                                                               for   k=1:1:nqptv           xkfac= wtq(k)*detj(k);                                                                          for  i=1:1:nnpe       sfac_onedof(i)  = sfac(i,k);  end    for  i=1:1:ndofnp       for j = 1:1:nnpe          j1=(i-1)*nnpe+j;       sfac_sixdof(i,j1)  = sfac_onedof(j);      end  end         mdofnp = mdofnp + xkfac*(sfac_sixdof'*sfac_sixdof);    % Calculations to incorparate MLS method  PHI(1:ndv)=phi(k,1:ndv);  % Make a matrix that multiplies the diffraction volume stresses  Qphi=zeros(ndofnp,ndofnp*ndv);  for i=1:1:ndv        Qphi(1,6*i-5)=PHI(i);    Qphi(2,6*i-4)=PHI(i);    Qphi(3,6*i-3)=PHI(i);    Qphi(4,6*i-2)=PHI(i);    Qphi(5,6*i-1)=PHI(i);    Qphi(6,6*i)=PHI(i);  end  qe = qe + (xkfac*(sfac_sixdof')*Qphi);  %  qe = qe + xkfac*(sfac_sixdof');    for  i=1:1:nnpe       bmatrix(1,i)       = dndx(i,k);      bmatrix(1,i+nnpe)  = 0;      bmatrix(1,i+2*nnpe)= 0;      bmatrix(1,i+3*nnpe)= dndy(i,k);      bmatrix(1,i+5*nnpe)= 0;      bmatrix(1,i+4*nnpe)= dndz(i,k);      bmatrix(2,i)       = 0;      bmatrix(2,i+nnpe)  = dndy(i,k);      bmatrix(2,i+2*nnpe)= 0;      bmatrix(2,i+3*nnpe)= dndx(i,k);      bmatrix(2,i+5*nnpe)= dndz(i,k);      bmatrix(2,i+4*nnpe)= 0;      bmatrix(3,i)       = 0;      bmatrix(3,i+nnpe)  = 0;      bmatrix(3,i+2*nnpe)= dndz(i,k);      bmatrix(3,i+3*nnpe)= 0;      bmatrix(3,i+5*nnpe)= dndy(i,k);      bmatrix(3,i+4*nnpe)= dndx(i,k);  end       equil_con = equil_con + xkfac*(bmatrix'*bmatrix);  endse = mdofnp + penalty_parm*equil_con;                                                                    