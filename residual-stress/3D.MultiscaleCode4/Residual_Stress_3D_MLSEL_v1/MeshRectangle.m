function mesh = MeshRectangle(ndiv)% MESHRECTANGLE - Mesh a rectangular region..%   %   mesh = MeshRectangle(ndiv)%%   ndiv is an n-vector of integers, giving the subdivisions%        in each coordinate direction.  n is either%        1, 2 or 3.%%   mesh is a MeshStructure for the unit n-cube.%nd = length(ndiv);if ( (nd ~= 1) &&  (nd ~= 2) &&  (nd ~= 3) )  error('dimension must be 1, 2 or 3');end%%  Construct meshes by increasing dimension.  This could %  be done more generally with a loop, but this is good %  enough for now.%%  Dimension 1.%  -----------%n1   = ndiv(1);dx   = 1.0/n1;xcrd = 0:dx:1;%c1  = 1:n1;c2  = c1 + 1;con = [c1; c2];%if (nd == 1)  crd = xcrd;  mesh = MeshStructure(crd, con);  returnend%%  Dimension 2.%  -----------%n2   = ndiv(2);dy   = 1.0/n2;ycrd = 0:dy:1;%[xtmp, ytmp] = ndgrid(xcrd, ycrd);xtmp = xtmp(:)';ytmp = ytmp(:)';%%  Connectivity.%lc1  = length(con(:));con1 = repmat(con(:)', [1 n2]);next = (n1+1)*repmat(0:(n2-1), [lc1 1]);con1 = con1 + next(:)';con2 = con1 + n1 + 1;%n12 = n1*n2;con1 = reshape(con1, [2 n12]);con2 = reshape(con2, [2 n12]);con  = [con1; con2];%if (nd == 2)  crd = [xtmp; ytmp];  mesh = MeshStructure(crd, con);  returnend%%  Works for 2D so far ...%%  Dimension 3.%  -----------%n3   = ndiv(3);dz   = 1.0/n3;zcrd = 0:dz:1;%[xtmp, ytmp, ztmp] = ndgrid(xcrd, ycrd, zcrd);xtmp = xtmp(:)';ytmp = ytmp(:)';ztmp = ztmp(:)';%%  Connectivity.%lc1  = length(con(:));con1 = repmat(con(:)', [1 n3]);next = ((n1+1)*(n2+1))*repmat(0:(n3-1), [lc1 1]);con1 = con1 + next(:)';con2 = con1 + (n1 + 1)*(n2 + 1);%n123 = n1*n2*n3;con1 = reshape(con1, [4 n123]);con2 = reshape(con2, [4 n123]);con  = [con1; con2];%crd = [xtmp; ytmp; ztmp];mesh = MeshStructure(crd, con);function mesh = MeshStructure(crd, con, eqv)% MeshStructure - Create mesh structure from mesh data.%   %   USAGE:%%   mesh = MeshStructure%   mesh = MeshStructure(crd, con)%   mesh = MeshStructure(crd, con, eqv)%%   INPUT:%%   crd is e x n, %       the array of nodal point locations%   con is d x m, (integer)%       the mesh connectivity%   eqv is 2 x k, (integer, optional) %       the equivalence array%%   OUTPUT:%%   mesh is a MeshStructure, %        the basic MeshStructure consists of three fields,%        the nodal point coordinates (.crd), the connectivity%        (.con) and the nodal point equivalence array (.eqv).%        %   NOTES:% %   *  With no arguments, this function returns and empty mesh%      structure.  With only two arguments, it sets the equivalence %      array to be empty.%%if (nargin == 0)  crd = [];  con = [];  eqv = [];elseif (nargin == 2)  eqv = [];end%mesh = struct('crd', crd, 'con', con, 'eqv', eqv);%